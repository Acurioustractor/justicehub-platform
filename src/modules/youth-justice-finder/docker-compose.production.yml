version: '3.8'

services:
  # PostgreSQL Database with PostGIS
  postgres:
    image: postgis/postgis:15-3.3
    container_name: yjs_postgres
    environment:
      POSTGRES_DB: youth_justice_services
      POSTGRES_USER: yjs_app
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/backups:/backups
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U yjs_app -d youth_justice_services"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for job queuing and caching
  redis:
    image: redis:7-alpine
    container_name: yjs_redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Data Pipeline Service
  data-pipeline:
    build:
      context: .
      dockerfile: Dockerfile.pipeline
    container_name: yjs_pipeline
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://yjs_app:${DATABASE_PASSWORD}@postgres:5432/youth_justice_services
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: info
      PIPELINE_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      MAX_CONCURRENT_JOBS: 3
      BATCH_SIZE: 100
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "health-check.js"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Frontend API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: yjs_api
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://yjs_app:${DATABASE_PASSWORD}@postgres:5432/youth_justice_services
      REDIS_URL: redis://redis:6379
      PORT: 3000
      CORS_ORIGIN: ${FRONTEND_URL}
      RATE_LIMIT_REQUESTS: 100
      RATE_LIMIT_WINDOW: 60000
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: yjs_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: yjs_grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: "grafana-piechart-panel"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: yjs_network